{"version":3,"sources":["components/SendImage.jsx","components/Prediction.jsx","components/Index.jsx","index.js"],"names":["SendImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","send","event","setState","loading","formData","FormData","append","target","files","fetch","state","host","method","body","then","res","json","setPrediction","data","catch","error","console","react_default","a","createElement","type","accept","capture","onChange","Component","Prediction","prediction","Index","pred","clearInput","img","Fragment","SendImage_SendImage","Prediction_Prediction","onClick","ReactDOM","render","Index_Index","document","getElementById"],"mappings":"uKAEqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,KAAO,SAAAC,GACLR,EAAKS,SAAS,CAAEC,SAAS,IACzB,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,QAASL,EAAMM,OAAOC,MAAM,IAC5CC,MAAMhB,EAAKiB,MAAMC,KAAO,YAAa,CACnCC,OAAQ,OACRC,KAAMT,IAELU,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAD,GACJpB,EAAKD,MAAMyB,cAAcJ,EAAKK,QAE/BC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,GACd3B,EAAKS,SAAS,CAAEC,SAAS,OA1BZ,OAMjBV,EAAKiB,MAAQ,CACXP,SAAS,EACTQ,KANS,qCAFMlB,wEA+BjB,OACE6B,EAAAC,EAAAC,cAAA,WACG5B,KAAKc,MAAMP,QACV,UAEAmB,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,OAAO,UAAUC,SAAO,EAACC,SAAUhC,KAAKI,eArC9B6B,aCAlBC,cACnB,SAAAA,EAAYtC,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,GAAApC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KACZJ,0EAIN,OACE8B,EAAAC,EAAAC,cAAA,0BAC2C,KAA5B5B,KAAKJ,MAAMuC,WAAW,GAAY,QAAU,oBARzBF,aCEnBG,cACnB,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACjBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KAORyB,cAAgB,SAAAgB,GACdxC,EAAKS,SAAS,CACZ6B,WAAYE,KAVGxC,EAcnByC,WAAa,WACXzC,EAAKS,SAAS,CACZ6B,WAAY,QAddtC,EAAKiB,MAAQ,CACXyB,IAAK,KACLJ,WAAY,MAJGtC,wEAqBjB,OACE6B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACEd,EAAAC,EAAAC,cAAA,6BAC2B,OAA1B5B,KAAKc,MAAMqB,WACVT,EAAAC,EAAAC,cAACa,EAAD,CAAWpB,cAAerB,KAAKqB,gBAE/BK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAa,SAAA,KACEd,EAAAC,EAAAC,cAACc,EAAD,CAAYP,WAAYnC,KAAKc,MAAMqB,aACnCT,EAAAC,EAAAC,cAAA,UAAQe,QAAS3C,KAAKsC,YAAtB,cA9BuBL,aCAnCW,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAWC,SAASC,eAAe","file":"static/js/main.a1fc54c8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class SendImage extends Component {\n  constructor(props) {\n    super(props);\n    let host = \"https://isthisapple.herokuapp.com\";\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\n      host = \"http://127.0.0.1:5000\";\n    }\n    this.state = {\n      loading: false,\n      host: host\n    };\n  }\n\n  send = event => {\n    this.setState({ loading: true });\n    var formData = new FormData();\n    formData.append(\"image\", event.target.files[0]);\n    fetch(this.state.host + \"/predict/\", {\n      method: \"POST\",\n      body: formData\n    })\n      .then(res => res.json())\n      .then(body => {\n        this.props.setPrediction(body.data);\n      })\n      .catch(error => {\n        console.error(error);\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.loading ? (\n          \"Loading\"\n        ) : (\n          <input type=\"file\" accept=\"image/*\" capture onChange={this.send} />\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Prediction extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        Prediction: {this.props.prediction[0] == \"0\" ? \"Apple\" : \"Not apple\"}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport SendImage from \"./SendImage.jsx\";\nimport Prediction from \"./Prediction.jsx\";\n\nexport default class Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: null,\n      prediction: null\n    };\n  }\n\n  setPrediction = pred => {\n    this.setState({\n      prediction: pred\n    });\n  };\n\n  clearInput = () => {\n    this.setState({\n      prediction: null\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <div>Is this apple?</div>\n        {this.state.prediction === null ? (\n          <SendImage setPrediction={this.setPrediction} />\n        ) : (\n          <>\n            <Prediction prediction={this.state.prediction} />\n            <button onClick={this.clearInput}>X</button>\n          </>\n        )}\n      </>\n    );\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Index from \"./components/Index.jsx\";\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n"],"sourceRoot":""}